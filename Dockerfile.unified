# ═══════════════════════════════════════════════════════════════
# NOFX 统一镜像 Dockerfile (Go 后端 + Nginx 前端)
# 将原本的两个服务合并到一个镜像中运行
# ═══════════════════════════════════════════════════════════════

ARG GO_VERSION=1.25-alpine
ARG NODE_VERSION=20-alpine
ARG NGINX_VERSION=alpine
ARG ALPINE_VERSION=latest
ARG TA_LIB_VERSION=0.4.0

# ──────────────────────────────────────────────────────────────
# TA-Lib 构建阶段 (后端依赖)
# ──────────────────────────────────────────────────────────────
FROM alpine:${ALPINE_VERSION} AS ta-lib-builder
ARG TA_LIB_VERSION

RUN apk update && apk add --no-cache \
    wget tar make gcc g++ musl-dev autoconf automake

RUN wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-${TA_LIB_VERSION}-src.tar.gz && \
    tar -xzf ta-lib-${TA_LIB_VERSION}-src.tar.gz && \
    cd ta-lib && \
    if [ "$(uname -m)" = "aarch64" ]; then \
        CONFIG_GUESS=$(find /usr/share -name config.guess | head -1) && \
        CONFIG_SUB=$(find /usr/share -name config.sub | head -1) && \
        cp "$CONFIG_GUESS" config.guess && \
        cp "$CONFIG_SUB" config.sub && \
        chmod +x config.guess config.sub; \
    fi && \
    ./configure --prefix=/usr/local && \
    make && make install && \
    cd .. && rm -rf ta-lib ta-lib-${TA_LIB_VERSION}-src.tar.gz

# ──────────────────────────────────────────────────────────────
# 后端构建阶段 (Go 应用)
# ──────────────────────────────────────────────────────────────
FROM golang:${GO_VERSION} AS backend-builder

RUN apk update && apk add --no-cache git make gcc g++ musl-dev

COPY --from=ta-lib-builder /usr/local /usr/local

WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download

COPY . .
RUN CGO_ENABLED=1 GOOS=linux go build -trimpath -ldflags="-s -w" -o nofx .

# ──────────────────────────────────────────────────────────────
# 前端构建阶段 (Node.js)
# ──────────────────────────────────────────────────────────────
FROM node:${NODE_VERSION} AS frontend-builder
WORKDIR /build

COPY web/package*.json ./
RUN npm ci

COPY web/ ./
RUN npm run build

# ──────────────────────────────────────────────────────────────
# 运行时阶段 (Nginx + Go 后端)
# ──────────────────────────────────────────────────────────────
FROM nginx:${NGINX_VERSION}

# 安装必要的运行时依赖
RUN apk update && apk add --no-cache \
    ca-certificates \
    tzdata \
    supervisor \
    curl \
    && rm -rf /var/cache/apk/*

# 从构建阶段复制文件
COPY --from=ta-lib-builder /usr/local /usr/local
COPY --from=backend-builder /app/nofx /usr/local/bin/nofx
COPY --from=frontend-builder /build/dist /usr/share/nginx/html

# 复制配置文件
COPY nginx/nginx.conf.unified /etc/nginx/conf.d/default.conf
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY docker/start-unified.sh /usr/local/bin/start-unified.sh

# 创建必要的目录
RUN mkdir -p /app/decision_logs && \
    chmod +x /usr/local/bin/start-unified.sh && \
    chmod +x /usr/local/bin/nofx

# 设置工作目录
WORKDIR /app

# 暴露端口 (80 for nginx, 8080 for backend health check)
EXPOSE 80 8080

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost/health && curl -f http://localhost:8080/health || exit 1

# 使用 supervisor 启动多个服务
CMD ["/usr/local/bin/start-unified.sh"]